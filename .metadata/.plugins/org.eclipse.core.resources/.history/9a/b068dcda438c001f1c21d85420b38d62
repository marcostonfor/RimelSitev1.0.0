package rimelSite.scraping;

import com.sun.net.httpserver.HttpServer;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpExchange;
import org.json.JSONArray;
import org.json.JSONObject;
import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RssFeedServer {
    private HttpServer server;
    private Map<String, JSONArray> rssFeedsByUrl; // Map to store feeds by URL
    private static final int ITEMS_PER_PAGE = 10; // Number of items per page

    public RssFeedServer(String urlsFilePath, int port) throws IOException {
        List<String> rssUrls = Files.readAllLines(Paths.get(urlsFilePath)); // Load URLs from file
        rssFeedsByUrl = new HashMap<>();
        for (String rssUrl : rssUrls) {
            RimelSiteScrapingWeb rssReader = new RimelSiteScrapingWeb(rssUrl);
            rssFeedsByUrl.put(rssUrl, rssReader.getRssFeedAsJson());
        }
        server = HttpServer.create(new InetSocketAddress(port), 0); // Create server on specified port
        setupEndpoints(); // Setup endpoints
    }

    private void setupEndpoints() {
        // Endpoint to return RSS feed as JSON
        server.createContext("/rssfeed", new HttpHandler() {
            @Override
            public void handle(HttpExchange exchange) throws IOException {
                if ("GET".equals(exchange.getRequestMethod())) {
                    String query = exchange.getRequestURI().getQuery();
                    Map<String, String> params = queryToMap(query);
                    String rssUrl = params.get("url");
                    int page = Integer.parseInt(params.getOrDefault("page", "1"));

                    JSONArray rssFeedJson = rssFeedsByUrl.get(rssUrl);
                    JSONArray paginatedFeed = paginateFeed(rssFeedJson, page);

                    String response = paginatedFeed.toString(2);
                    exchange.getResponseHeaders().set("Content-Type", "application/json");
                    exchange.sendResponseHeaders(200, response.getBytes().length);
                    OutputStream os = exchange.getResponseBody();
                    os.write(response.getBytes());
                    os.close();
                } else {
                    exchange.sendResponseHeaders(405, -1); // 405 Method Not Allowed
                }
            }
        });

        // Endpoint to return RSS feed as HTML
        server.createContext("/", new HttpHandler() {
            @Override
            public void handle(HttpExchange exchange) throws IOException {
                if ("GET".equals(exchange.getRequestMethod())) {
                    String query = exchange.getRequestURI().getQuery();
                    Map<String, String> params = queryToMap(query);
                    String rssUrl = params.get("url");
                    int page = Integer.parseInt(params.getOrDefault("page", "1"));

                    JSONArray rssFeedJson = rssFeedsByUrl.get(rssUrl);
                    JSONArray paginatedFeed = paginateFeed(rssFeedJson, page);

                    StringBuilder htmlResponse = new StringBuilder();
                    htmlResponse.append("<!DOCTYPE html>");
                    htmlResponse.append("<html lang=\"en\">");
                    htmlResponse.append("<head>");
                    htmlResponse.append("<meta charset=\"UTF-8\">");
                    htmlResponse.append("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
                    htmlResponse.append("<title>RSS Feed</title>");
                    htmlResponse.append("<link rel=\"stylesheet\" type=\"text/css\" href=\"/styles.css\">");
                    htmlResponse.append("</head>");
                    htmlResponse.append("<body>");
                    htmlResponse.append("<h1>RSS Feed</h1>");
                    htmlResponse.append("<div id=\"container\">");
                    htmlResponse.append("<div id=\"feed\">");

                    for (int i = 0; i < paginatedFeed.length(); i++) {
                        JSONObject item = paginatedFeed.getJSONObject(i);
                        htmlResponse.append("<div class=\"feed-item\">");
                        htmlResponse.append("<h2>").append(item.getString("title")).append("</h2>");
                        htmlResponse.append("<p>").append(item.getString("description")).append("</p>");
                        htmlResponse.append("<a href=\"").append(item.getString("link")).append("\" target=\"_blank\">Read more</a>");
                        htmlResponse.append("<p><small>").append(item.getString("pubDate")).append("</small></p>");
                        htmlResponse.append("</div>");
                    }

                    htmlResponse.append("</div>");
                    htmlResponse.append("<div id=\"pagination\">");
                    int totalPages = (int) Math.ceil((double) rssFeedJson.length() / ITEMS_PER_PAGE);
                    for (int i = 1; i <= totalPages; i++) {
                        htmlResponse.append("<a href=\"?url=").append(rssUrl).append("&page=").append(i).append("\">").append(i).append("</a> ");
                    }
                    htmlResponse.append("</div>");
                    htmlResponse.append("</div>");
                    htmlResponse.append("</body>");
                    htmlResponse.append("</html>");

                    String response = htmlResponse.toString();
                    exchange.getResponseHeaders().set("Content-Type", "text/html");
                    exchange.sendResponseHeaders(200, response.getBytes().length);
                    OutputStream os = exchange.getResponseBody();
                    os.write(response.getBytes());
                    os.close();
                } else {
                    exchange.sendResponseHeaders(405, -1); // 405 Method Not Allowed
                }
            }
        });
        
        // Endpoint para el archivo CSS
        server.createContext("/styles.css", new HttpHandler() {
            @Override
            public void handle(HttpExchange exchange) throws IOException {
                if ("GET".equals(exchange.getRequestMethod())) {
                    byte[] response = Files.readAllBytes(Paths.get("src/main/webapp/styles.css"));
                    exchange.getResponseHeaders().set("Content-Type", "text/css");
                    exchange.sendResponseHeaders(200, response.length);
                    OutputStream os = exchange.getResponseBody();
                    os.write(response);
                    os.close();
                } else {
                    exchange.sendResponseHeaders(405, -1); // 405 Method Not Allowed
                }
            }
        });
    }

    private JSONArray paginateFeed(JSONArray feed, int page) {
        JSONArray paginatedFeed = new JSONArray();
        int start = (page - 1) * ITEMS_PER_PAGE;
        int end = Math.min(start + ITEMS_PER_PAGE, feed.length());
        for (int i = start; i < end; i++) {
            paginatedFeed.put(feed.getJSONObject(i));
        }
        return paginatedFeed;
    }

    private Map<String, String> queryToMap(String query) {
        Map<String, String> result = new HashMap<>();
        for (String param : query.split("&")) {
            String[] entry = param.split("=");
            result.put(entry[0], entry.length > 1 ? entry[1] : "");
        }
        return result;
    }
    
    

    public static void main(String[] args) throws IOException {
        new RssFeedServer("urls.txt", 8000).start();
    }

    public void start() {
        server.start();
    }

    public void stop() {
        server.stop(0);
    }
}