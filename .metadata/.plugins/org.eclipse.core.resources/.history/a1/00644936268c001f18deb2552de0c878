package rimelSite.scraping;

import com.sun.net.httpserver.HttpServer;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpExchange;
import org.json.JSONArray;
import java.io.IOException;
import java.io.OutputStream;
import java.net.InetSocketAddress;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;

public class RssFeedServer {
    private HttpServer server;
    private List<String> rssUrls;

    public RssFeedServer(String urlsFilePath, int port) throws IOException {
        rssUrls = Files.readAllLines(Paths.get(urlsFilePath));
        server = HttpServer.create(new InetSocketAddress(port), 0);
        setupEndpoints();
    }

    private void setupEndpoints() {
        server.createContext("/rssfeed", new HttpHandler() {
            @Override
            public void handle(HttpExchange exchange) throws IOException {
                if ("GET".equals(exchange.getRequestMethod())) {
                    JSONArray rssFeedJson = new JSONArray();
                    for (String rssUrl : rssUrls) {
                        RimelSiteScrapingWeb rssReader = new RimelSiteScrapingWeb(rssUrl);
                        JSONArray feed = rssReader.getRssFeedAsJson();
                        for (int i = 0; i < feed.length(); i++) {
                            rssFeedJson.put(feed.getJSONObject(i));
                        }
                    }
                    String response = rssFeedJson.toString(2);
                    exchange.getResponseHeaders().set("Content-Type", "application/json");
                    exchange.sendResponseHeaders(200, response.getBytes().length);
                    OutputStream os = exchange.getResponseBody();
                    os.write(response.getBytes());
                    os.close();
                } else {
                    exchange.sendResponseHeaders(405, -1); // 405 Method Not Allowed
                }
            }
        });

		server.createContext("/", new HttpHandler() {
			@Override
			public void handle(HttpExchange exchange) throws IOException {
				if ("GET".equals(exchange.getRequestMethod())) {
					JSONArray rssFeedJson = rssReader.getRssFeedAsJson();
					StringBuilder htmlResponse = new StringBuilder();
					htmlResponse.append("<!DOCTYPE html>");
					htmlResponse.append("<html lang=\"en\">");
					htmlResponse.append("<head>");
					htmlResponse.append("<meta charset=\"UTF-8\">");
					htmlResponse.append("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">");
					htmlResponse.append("<title>RSS Feed</title>");
					htmlResponse.append("<link rel=\"stylesheet\" type=\"text/css\" href=\"/styles.css\">");
					htmlResponse.append("</head>");
					htmlResponse.append("<body>");
					htmlResponse.append("<h1>RSS Feed</h1>");
					htmlResponse.append("<div id=\"container\">");
					htmlResponse.append("<div id=\"feed\">");

					for (int i = 0; i < rssFeedJson.length(); i++) {
						htmlResponse.append("<div class=\"feed-item\">");
						htmlResponse.append("<h2>").append(rssFeedJson.getJSONObject(i).getString("title"))
								.append("</h2>");
						htmlResponse.append("<p>").append(rssFeedJson.getJSONObject(i).getString("description"))
								.append("</p>");
						htmlResponse.append("<a href=\"").append(rssFeedJson.getJSONObject(i).getString("link"))
								.append("\" target=\"_blank\">Read more</a>");
						htmlResponse.append("<p><small>").append(rssFeedJson.getJSONObject(i).getString("pubDate"))
								.append("</small></p>");
						htmlResponse.append("</div>");
					}

					htmlResponse.append("</div>");
					htmlResponse.append("</div>");
					htmlResponse.append("</body>");
					htmlResponse.append("</html>");

					String response = htmlResponse.toString();
					exchange.getResponseHeaders().set("Content-Type", "text/html");
					exchange.sendResponseHeaders(200, response.getBytes().length);
					OutputStream os = exchange.getResponseBody();
					os.write(response.getBytes());
					os.close();
				} else {
					exchange.sendResponseHeaders(405, -1); // 405 Method Not Allowed
				}
			}
		});


        server.createContext("/styles.css", new HttpHandler() {
            @Override
            public void handle(HttpExchange exchange) throws IOException {
                if ("GET".equals(exchange.getRequestMethod())) {
                    byte[] response = Files.readAllBytes(Paths.get("src/main/webapp/styles.css"));
                    exchange.getResponseHeaders().set("Content-Type", "text/css");
                    exchange.sendResponseHeaders(200, response.length);
                    OutputStream os = exchange.getResponseBody();
                    os.write(response);
                    os.close();
                } else {
                    exchange.sendResponseHeaders(405, -1); // 405 Method Not Allowed
                }
            }
        });
    }

    public void start() {
        server.setExecutor(null); // creates a default executor
        server.start();
        System.out.println("Server started on port " + server.getAddress().getPort());
    }

    public void stop(int delay) {
        server.stop(delay);
        System.out.println("Server stopped");
    }
}
